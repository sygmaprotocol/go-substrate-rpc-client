// Code generated by mockery v2.13.0-beta.1. DO NOT EDIT.

package parser

import (
	generic "github.com/sygmaprotocol/go-substrate-rpc-client/v4/rpc/chain/generic"
	mock "github.com/stretchr/testify/mock"

	registry "github.com/sygmaprotocol/go-substrate-rpc-client/v4/registry"
)

// ExtrinsicParserMock is an autogenerated mock type for the ExtrinsicParser type
type ExtrinsicParserMock[A interface{}, S interface{}, P interface{}] struct {
	mock.Mock
}

// ParseExtrinsics provides a mock function with given fields: callRegistry, block
func (_m *ExtrinsicParserMock[A, S, P]) ParseExtrinsics(callRegistry registry.CallRegistry, block generic.GenericSignedBlock[A, S, P]) ([]*Extrinsic[A, S, P], error) {
	ret := _m.Called(callRegistry, block)

	var r0 []*Extrinsic[A, S, P]
	if rf, ok := ret.Get(0).(func(registry.CallRegistry, generic.GenericSignedBlock[A, S, P]) []*Extrinsic[A, S, P]); ok {
		r0 = rf(callRegistry, block)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Extrinsic[A, S, P])
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(registry.CallRegistry, generic.GenericSignedBlock[A, S, P]) error); ok {
		r1 = rf(callRegistry, block)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type NewExtrinsicParserMockT interface {
	mock.TestingT
	Cleanup(func())
}

// NewExtrinsicParserMock creates a new instance of ExtrinsicParserMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewExtrinsicParserMock[A interface{}, S interface{}, P interface{}](t NewExtrinsicParserMockT) *ExtrinsicParserMock[A, S, P] {
	mock := &ExtrinsicParserMock[A, S, P]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
